% FEM code for 1D 2nd order steady state equation% Marcel Frehner, ETH Zurich, 2017% GENERAL STUFF    clear                                           % clear the current Workspace    close all                                       % close all figure windows    clc                                             % clear the Command Window    % GEOMETRICAL PARAMETERS    Lx	=	10;                                     % length of model [m]    % PHYSICAL PARAMETERS    kappa	=	1.0;                                  % thermal diffusivity [m2/s]    source	=	1.0;                                  % heat source [K/s]    % NUMERICAL PARAMETERS    el_tot      =	4;                              % #elements total    n_tot       = el_tot + 1 ;                   	% #nodes total    n_per_el	=	2;                              % #nodes per element    % CREATE NUMERICAL GRID    dx      =  Lx/el_tot;                     	% distance between two nodes    GCOORD  =	[0 : dx : Lx];                    	% array of coordinates	% LOCAL-TO-GLOBAL MAPPING    EL_N    =   [1 : 1: el_tot ; 2 : 1 : el_tot + 1];                        % relates local to global node numbers per element	% BOUNDARY CONDITIONS    bc_dof  =   [   1  n_tot];                      % dof's to which Dirichlet bc's are assigned    bc_val  =   [   1 1   ];                      % value for these dof's    % INITIALIZATION OF ALL KINDS OF STUFF    KG	=	zeros(n_tot,n_tot);                     % global stiffness matrix    FG	=	zeros(n_tot,1);                         % global force vector       Kloc    =    (kappa/dx)*[1, -1; -1, 1];                        % local stiffness matrix    Floc    =   source*dx*0.5*[1;1];                        % local force vector    for iel = 1:el_tot % ELEMENT LOOP    n_now   =   EL_N(: , iel);                        % which nodes are in the current element?         % add local matrices to global ones        KG(n_now,n_now)     =   KG(n_now, n_now) + Kloc;        FG(n_now)           =   FG(n_now)+Floc;end % ELEMENT LOOP% APPLY BOUNDARY CONDITIONS    %KG(bc_dof,:)        =   0;                      % set bc-rows to zero    %KG(bc_dof,bc_dof)   =   1;            % put 1 onto the main diagonal    %FG(bc_dof)          =   bc_val;          	% set bc-value to the rhs    for i=1: length(bc_dof)      KG(bc_dof(i), : ) = 0.0;      KG(bc_dof(i),bc_dof(i)) = 1.0;      FG( bc_dof(i) ) = bc_val(i);end    % SOLVER    T	= KG\FG;    % ANALYTICAL SOLUTION    x_ana 	=   0:Lx/1000:Lx;    T_ana  	=   -1/2*source/kappa.*x_ana.^2 + ...                (1/2*source*Lx/kappa+(bc_val(2)-bc_val(1))/Lx)*x_ana + bc_val(1);    % PLOTTING    plot(x_ana,T_ana,'k-','LineWidth',2)            % plot analytical solution as thick black line    hold on                                         % set the figure status to hold, to plot more stuff on top    plot(GCOORD,T,'ro')                             % plot numerical solution as red circles        set(gca,'FontSize',14)                          % set the font size of the figure to 14    xlim([0 Lx])                                    % left and right limits of the x-axis    %ylim([0 14])                                    % bottom and top limits of the y-axis    xlabel('x-coordinate [m]','FontSize',14)        % label of the x-axis    ylabel('T [Â°]','FontSize',14)                   % label of the y-axis    legend('Analytical','FE-solution')              % add a legend to the figure    drawnow